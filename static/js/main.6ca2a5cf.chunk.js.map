{"version":3,"sources":["components/MyPieChart.js","components/GithubApp.js","App.js","serviceWorker.js","index.js"],"names":["MyPieChart","languages","COLORS","RADIAN","Math","PI","console","log","width","height","data","label","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","dataKey","nameKey","labelLine","map","entry","key","length","GithubApp","useState","username","setUsername","setLanguages","fetching","setFetching","fetchUserdetails","a","fetch","resp","json","userRepositories","languageMap","Map","forEach","repo","language","has","set","get","value","concat","count","className","type","placeholder","onChange","event","target","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAkEeA,EA9DI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEXC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAClGC,EAASC,KAAKC,GAAK,IAkBzB,OAFAC,QAAQC,IAAIN,GAGR,6BACI,kBAAC,IAAD,CAAUO,MAAO,IAAKC,OAAQ,KAC1B,kBAAC,IAAD,CACIC,KAAMT,EACNU,MArBc,SAAC,GAEtB,IADLC,EACI,EADJA,GAAIC,EACA,EADAA,GAAIC,EACJ,EADIA,SAAUC,EACd,EADcA,YAAaC,EAC3B,EAD2BA,YAAaC,EACxC,EADwCA,QAErCC,GADH,EADiDC,MAErCJ,EAA4C,IAA7BC,EAAcD,IACvCK,EAAIR,EAAKM,EAASd,KAAKiB,KAAKP,EAAWX,GACvCmB,EAAIT,EAAKK,EAASd,KAAKmB,KAAKT,EAAWX,GAE7C,OACE,0BAAMiB,EAAGA,EAAGE,EAAGA,EAAGE,KAAK,QAAQC,WAAYL,EAAIR,EAAK,QAAU,MAAOc,iBAAiB,WAAtF,WACiB,IAAVT,GAAeU,QAAQ,GAD9B,OAcUH,KAAK,UACLI,QAAQ,QACRC,QAAQ,WACRC,WAAW,GAGP7B,EAAU8B,KAAI,SAACC,EAAOb,GAAR,OAAkB,kBAAC,IAAD,CAAMc,IAAG,eAAUd,GAASK,KAAMtB,EAAOiB,EAAQjB,EAAOgC,cAGhG,kBAAC,IAAD,SCkBDC,EAtDG,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,OAEcF,mBAAS,IAFvB,mBAEbnC,EAFa,KAEFsC,EAFE,OAGYH,oBAAS,GAHrB,mBAGbI,EAHa,KAGHC,EAHG,KASdC,EAAgB,uCAAG,gCAAAC,EAAA,6DACrBF,GAAY,GADS,SAEFG,MAAM,gCAAD,OAAiCP,EAAjC,WAFH,cAEfQ,EAFe,gBAGUA,EAAKC,OAHf,QAGfC,EAHe,UAKXC,EAAc,IAAIC,IACxBF,EAAiBG,SAAQ,SAACC,GACnBA,EAAKC,WACDJ,EAAYK,IAAIF,EAAKC,UACpBJ,EAAYM,IAAIH,EAAKC,SAAUJ,EAAYO,IAAIJ,EAAKC,UAAU,GAE9DJ,EAAYM,IAAIH,EAAKC,SAAU,OAI3Cb,EAAa,IACbS,EAAYE,SAAQ,SAACM,EAAOvB,GACxBM,GAAa,SAAAtC,GAAS,OAAIA,EAAUwD,OAAO,CACvCL,SAAUnB,EACVyB,MAAOF,WAInBf,GAAY,GAvBS,2CAAH,qDA0BtB,OACI,yBAAKkB,UAAU,aACX,gEACA,2BACIC,KAAK,OACLC,YAAY,+BACZL,MAAOnB,EACPyB,SArCS,SAACC,GAClBzB,EAAYyB,EAAMC,OAAOR,UAsCrB,4BAAQS,QAASvB,GAAjB,SACA,8BAGCzC,EAAUiC,OAAS,IAAMM,GACnB,kBAAC,EAAD,CAAYvC,UAAWA,MCvC3BiE,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,c","file":"static/js/main.6ca2a5cf.chunk.js","sourcesContent":["import React from 'react';\nimport { PieChart, Pie, Cell, Tooltip } from 'recharts';\n// import { Chart } from \"react-google-charts\";\n\nconst MyPieChart = ({languages}) => {\n      \n    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#56eec7', '#FF5733', '#35E929', '#3983D5', '#9E2DE7'];\n    const RADIAN = Math.PI / 180;\n\n    const renderCustomizedLabel = ({\n        cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n      }) => {\n         const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      \n        return (\n          <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n            {`${(percent * 100).toFixed(0)}%`}\n          </text>\n        );\n      };\n\n    console.log(languages);\n\n    return(\n        <div>\n            <PieChart width={600} height={600}>\n                <Pie\n                    data={languages}\n                    label={renderCustomizedLabel}\n                    fill=\"#8884d8\"\n                    dataKey=\"count\"\n                    nameKey=\"language\"\n                    labelLine={false}\n                >\n                    {\n                        languages.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n                    }\n                </Pie>\n                <Tooltip />\n            </PieChart>\n\n            {/* <Chart\n                width={'500px'}\n                height={'300px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={languages}\n                // data={[\n                //     ['Task', 'Hours per Day'],\n                //     ['Work', 11],\n                //     ['Eat', 2],\n                //     ['Commute', 2],\n                //     ['Watch TV', 2],\n                //     ['Sleep', 7],\n                // ]}\n                options={{\n                    title: 'Languages',\n                }}\n/> */}\n\n        </div>\n    );\n}\n\nexport default MyPieChart;","import React, { useState } from 'react';\nimport './GithubApp.scss';\nimport MyPieChart from './MyPieChart';\n\nconst GithubApp = () => {\n    const [username, setUsername] = useState(\"\");\n    const [languages, setLanguages] = useState([]);\n    const [fetching, setFetching] = useState(false);\n\n    const handleChange = (event) => {\n        setUsername(event.target.value);\n    }\n\n    const fetchUserdetails = async () => {\n        setFetching(true);\n        const resp = await fetch(`https://api.github.com/users/${username}/repos`);\n        const userRepositories = await resp.json();\n        if(userRepositories) {\n            const languageMap = new Map();\n            userRepositories.forEach((repo) => {\n                if(repo.language) {\n                    if(languageMap.has(repo.language)) {\n                        languageMap.set(repo.language, languageMap.get(repo.language)+1);\n                    } else {\n                        languageMap.set(repo.language, 1);\n                    }\n                }\n            });\n            setLanguages([]);\n            languageMap.forEach((value, key) => {\n                setLanguages(languages => languages.concat({\n                    language: key,\n                    count: value\n                }));\n            })\n        }\n        setFetching(false);\n    }\n\n    return (\n        <div className=\"container\">\n            <h3>What language does User code in?</h3>\n            <input \n                type=\"text\"\n                placeholder=\"Enter User's Github username\"\n                value={username}\n                onChange={handleChange}\n            />\n            <button onClick={fetchUserdetails}>Fetch</button>\n            <div>\n                \n            </div>\n            {languages.length > 0 && !fetching\n                && <MyPieChart languages={languages} /> }\n        </div>\n    )\n};\n\nexport default GithubApp;\n","import React from 'react';\nimport './App.css';\nimport GithubApp from './components/GithubApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GithubApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}